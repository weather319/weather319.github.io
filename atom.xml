<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>All IS ONE</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://weather319.github.io/"/>
  <updated>2016-04-29T02:19:07.000Z</updated>
  <id>http://weather319.github.io/</id>
  
  <author>
    <name>Weather</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 使用kmeans聚类分割目标</title>
    <link href="http://weather319.github.io/2016/04/28/Python-%E4%BD%BF%E7%94%A8kmeans%E8%81%9A%E7%B1%BB%E5%88%86%E5%89%B2%E7%9B%AE%E6%A0%87/"/>
    <id>http://weather319.github.io/2016/04/28/Python-使用kmeans聚类分割目标/</id>
    <published>2016-04-28T11:53:54.000Z</published>
    <updated>2016-04-29T02:19:07.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Python-使用kmeans聚类分割目标&quot;&gt;&lt;a href=&quot;#Python-使用kmeans聚类分割目标&quot; class=&quot;headerlink&quot; title=&quot;Python 使用kmeans聚类分割目标&quot;&gt;&lt;/a&gt;Python 使用kmeans聚类分割目标&lt;/h1&gt;&lt;p&gt;###关于背景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在复杂变化的背景中，识别运动目标并跟踪是一件很困难的事情。简单使用灰度阈值或HSV颜色空间阈值分割在特定环境下效果不错，但是在现实环境下（水草、淤泥）都会。&lt;/li&gt;
&lt;li&gt;当对象受到光影变化或者背景颜色从黑转化到白等，都会导致目标残缺。&lt;/li&gt;
&lt;li&gt;最重要的问题在于，由于使用阈值分割，不但需要手动设定阈值，不同的背景阈值差别很大，效率非常低。&lt;/li&gt;
&lt;li&gt;生成的轮廓数量会大于目标轮廓数量，需要条件检索目标轮廓，在特定情况下时，会导致目标丢失。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不像汽车、人脸等跟踪，因为鱼没有特定的特征，又需要精确获取目标轮廓来计算速度、尾频等参数，目前大部分办法都是使用离线的模式：即录像、分析、分割目标、计算参数。&lt;/strong&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;在视频的实时跟踪中，直接对rgb图像进行聚类，比如设定类数为4-5类，这样可以使复杂背景在光影下寻找目标变简单快速。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##代码演示&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find_fish_kmeans&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(image)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kernel = np.ones((&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;), np.uint8)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    img = image.copy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; image &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;图像加载错误&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sys.exit()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(np.shape(image)) != &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;&quot;不是多通道图片，请确认图像类型&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sys.exit()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            m, n, _ = np.shape(img)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# kmeans聚类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Z = np.float32(img.reshape((&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)))  &lt;span class=&quot;comment&quot;&gt;# 把图像拉伸成一列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;&quot;Z的尺寸为[&amp;#123;&amp;#125;]&quot;&lt;/span&gt;.format(np.shape(Z)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            criteria = (cv2.TERM_CRITERIA_EPS +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        cv2.TERM_CRITERIA_MAX_ITER, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            K = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ret, label, center = cv2.kmeans(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Z, K, &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, criteria, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, cv2.KMEANS_RANDOM_CENTERS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            center = np.uint8(center)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;&quot;中心点坐标为&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(center)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;&quot;label的尺寸为[&amp;#123;&amp;#125;]&quot;&lt;/span&gt;.format(np.shape(label.flatten())))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            img1 = center[label.flatten()]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            img1_kmeans = img1.reshape((img.shape))  &lt;span class=&quot;comment&quot;&gt;# 获得聚类的图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			center_zero = np.float32(center)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            red_max = (center_zero[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] - (center_zero[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                            [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + center_zero[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) / &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; red_max&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            idmax = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, K):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                print(center_zero[i][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] - (center_zero[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + center_zero[i][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) / &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (center_zero[i][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] - (center_zero[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + center_zero[i][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) / &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;) &amp;gt; red_max:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    red_max = (center_zero[i][&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] - (center_zero[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + center_zero[i][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) / &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;# print red_max&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    idmax = i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            zero = np.zeros(np.shape(center))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            zero[idmax] = center[idmax]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;comment&quot;&gt;# zero = np.uint8(zero) #如果不转化回uint8，图像显示为黑白色。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;&quot;选取第[&amp;#123;&amp;#125;]类为鱼&quot;&lt;/span&gt;.format(idmax + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;&quot;坐标值为&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(zero)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            img2 = zero[label.flatten()]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            img2_kmeans = img2.reshape((img.shape))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; img1_kmeans, img2_kmeans, center, label&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;##结果：&lt;br&gt;鱼-光影下  &lt;img src=&quot;http://7xti8v.com1.z0.glb.clouddn.com/fishresult_1.png&quot; alt=&quot;鱼-光影下&quot;&gt;&lt;br&gt;鱼-阴影下  &lt;img src=&quot;http://7xti8v.com1.z0.glb.clouddn.com/fishresult_2.png&quot; alt=&quot;鱼-阴影下&quot;&gt;&lt;/p&gt;
&lt;p&gt;###优点：&lt;br&gt;&lt;strong&gt;直接调用opencv的 cv2.kmeans函数，速度快，视频的实时跟踪不容易丢失轮廓，对鱼的速度、尾频计算非常有用。&lt;/strong&gt;&lt;br&gt;&lt;em&gt;另一大难点在于，2个目标A与B重合时识别到各自的轮廓，AB分离后，继续跟踪到对应的目标AB而不是BA&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-使用kmeans聚类分割目标&quot;&gt;&lt;a href=&quot;#Python-使用kmeans聚类分割目标&quot; class=&quot;headerlink&quot; title=&quot;Python 使用kmeans聚类分割目标&quot;&gt;&lt;/a&gt;Python 使用kmeans聚类分割目标&lt;/h1&gt;&lt;p&gt;###关于背景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在复杂变化的背景中，识别运动目标并跟踪是一件很困难的事情。简单使用灰度阈值或HSV颜色空间阈值分割在特定环境下效果不错，但是在现实环境下（水草、淤泥）都会。&lt;/li&gt;
&lt;li&gt;当对象受到光影变化或者背景颜色从黑转化到白等，都会导致目标残缺。&lt;/li&gt;
&lt;li&gt;最重要的问题在于，由于使用阈值分割，不但需要手动设定阈值，不同的背景阈值差别很大，效率非常低。&lt;/li&gt;
&lt;li&gt;生成的轮廓数量会大于目标轮廓数量，需要条件检索目标轮廓，在特定情况下时，会导致目标丢失。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不像汽车、人脸等跟踪，因为鱼没有特定的特征，又需要精确获取目标轮廓来计算速度、尾频等参数，目前大部分办法都是使用离线的模式：即录像、分析、分割目标、计算参数。&lt;/strong&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://weather319.github.io/tags/python/"/>
    
      <category term="opencv" scheme="http://weather319.github.io/tags/opencv/"/>
    
  </entry>
  
</feed>
